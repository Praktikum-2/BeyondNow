generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Department {
  department_id                                          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                   String     @db.VarChar
  departmentLeader_id_fk                                 String?    @db.Uuid
  organization_id_fk                                     String     @db.Uuid
  organization                                           Organization @relation(fields: [organization_id_fk], references: [organization_id])
  Developer_Department_departmentLeader_id_fkToDeveloper Employee?  @relation("Department_departmentLeader_id_fkToDeveloper", fields: [departmentLeader_id_fk], references: [employee_id])
  Employee_Employee_department_id_fkToDepartment         Employee[] @relation("Employee_department_id_fkToDepartment")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Project {
  project_id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String    @db.VarChar
  start_date        DateTime? @db.Timestamp(6)
  end_date          DateTime? @db.Timestamp(6)
  projectManager_id String?   @db.Uuid
  Developer         Employee? @relation(fields: [projectManager_id], references: [employee_id])
  Role              Role[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Skills {
  skill_id      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skill         String          @db.VarChar
  EmployeeSkill EmployeeSkill[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Employee {
  employee_id                                             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ime                                                     String          @db.VarChar
  priimek                                                 String?         @db.VarChar
  department_id_fk                                        String?         @db.Uuid
  Department_Department_departmentLeader_id_fkToDeveloper Department[]    @relation("Department_departmentLeader_id_fkToDeveloper")
  Department_Employee_department_id_fkToDepartment        Department?     @relation("Employee_department_id_fkToDepartment", fields: [department_id_fk], references: [department_id], map: "Developer_department_id_fk_fkey")
  EmployeeSkill                                           EmployeeSkill[]
  Project                                                 Project[]
  Role                                                    Role[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model EmployeeSkill {
  employeeSkill_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id_fk   String?   @db.Uuid
  skills_id_fk     String?   @db.Uuid
  Skills           Skills?   @relation(fields: [skills_id_fk], references: [skill_id], onDelete: Restrict, onUpdate: Restrict, map: "DeveloperSkill_skills_id_fk_fkey")
  Employee         Employee? @relation(fields: [employee_id_fk], references: [employee_id], onDelete: Cascade)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Role {
  role_id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id_fk String   @db.Uuid
  project_id_fk  String?  @db.Uuid
  employeeRole   String?  @db.VarChar
  Project        Project? @relation(fields: [project_id_fk], references: [project_id], onDelete: Cascade, onUpdate: Restrict, map: "ProjectDeveloper_project_id_fk_fkey")
  Employee       Employee @relation(fields: [employee_id_fk], references: [employee_id])
}

model User {
  uid           String       @id @db.VarChar(50) // Firebase UID
  email         String       @unique @db.VarChar
  organization  Organization?

  @@map("users")
}

model Organization {
  organization_id String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar
  user_uid        String       @unique @db.Uuid
  user            User         @relation(fields: [user_uid], references: [uid])
  departments     Department[]

  @@map("organizations")
}